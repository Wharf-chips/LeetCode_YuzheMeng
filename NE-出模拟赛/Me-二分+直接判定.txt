//有三种难度的题目难度分别为Easy,Medium,Hard。现在你总共有 E+EM+M+MH+H 道题，各个字符串的含义如下:
//E表示有E道题目难度为Easy。
//EM表示有EM道题目难度可以为Easy或Medium。
//M表示有M道题目难度为Medium。
//MH表示有MH道题目难度可以为Medium或Hard。
//H表示有H道题目难度为Hard。
//你要用这些题目出尽量多的模拟赛，为了保证题目质量且含有一定的区分度，每场模拟赛需要包含Easy,Medium,Hard //三种难度的题目各一道。求你最多能出多少场模拟赛。



#include <iostream>
#include<algorithm>
using namespace  std;

int main() {
    long long e,em,m,mh,h;
    cin>>e>>em>>m>>mh>>h;
    long long sum=e+em+m+mh+h;
    long long up=sum/3;
    long long down=min(e,min(m,h));
    long long mid=0;
    long long maxnum=0;

    while(up>=down){
        mid=(up+down)/2;
        long long tem1=max(0ll,min(mid-e,em));
        long long tem2=max(0ll,min(mid-h,mh));
        if(e+tem1>=mid&&(em-tem1)+m+(mh-tem2)>=mid&&h+tem2>=mid){
            maxnum=max(maxnum,mid);
            down=mid+1;
        }
        else up=mid-1;
    }

    cout<<maxnum;
}

//思路：根据给出的数据范围可以知道复杂度为log或常数级别，遂想到二分法
//利用二分搜索来解决，一个是确定搜索的上下界，这个比较容易知道
//第二就是要找到判断方式，于是这个题目的核心就转换为给定一个任意数作为模拟赛举办次数，判断他能否成立
//判断方式很简单，画一条线，从左到右依次是e,em,m,mh,h 可以看到mid类型的比赛是需要从em,和mh中借用的，比较不好确定
//因此可以先从easy和hard里面来计算，将给定的任意数先满足easy和hard类型，再看剩下的mid满足不满足，
//满足的话说明可以继续变大，反之缩小